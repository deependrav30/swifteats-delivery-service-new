server:
  port: 8082
  shutdown: graceful

spring:
  application:
    name: order-service
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:-postgres}:5432/${POSTGRES_DB:-swifteatsdb}
    username: ${POSTGRES_USER:-swifteats}
    password: ${POSTGRES_PASSWORD:-swifteats}
  rabbitmq:
    host: ${RABBITMQ_HOST:-rabbitmq}
    username: ${RABBITMQ_USER:-guest}
    password: ${RABBITMQ_PASS:-guest}
  rabbit:
    listener:
      simple:
        acknowledge-mode: auto
  lifecycle:
    timeout-per-shutdown-phase: 30s

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus

# Resilience4j defaults (tunable via env or config)
resilience4j:
  retry:
    instances:
      orderCreateRetry:
        maxAttempts: 3
        waitDuration: 200ms
  circuitbreaker:
    instances:
      orderCreateCircuit:
        registerHealthIndicator: true
        slidingWindowSize: 20
        minimumNumberOfCalls: 5
        failureRateThreshold: 50

# application-specific properties
payments:
  incoming-queue: payments.incoming
  results-queue: payments.results
